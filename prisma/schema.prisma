// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(CUSTOMER)
  address       String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  customerBookings Booking[] @relation("CustomerBookings")
  maidProfile   MaidProfile?
  reviews       Review[]
  notifications Notification[]
  messages      Message[]
  payments      Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MaidProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  experience      Int      @default(0)
  hourlyRate      Float
  availability    Json     // Store weekly schedule
  languages       String[]
  profileImage    String?
  backgroundCheck Boolean  @default(false)
  rating          Float    @default(0)
  totalReviews    Int      @default(0)
  isVerified      Boolean  @default(false)
  isActive        Boolean  @default(true)
  radius          Float    @default(10) // Service radius in km
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  services        MaidService[]
  bookings        Booking[]  @relation("MaidBookings")
  reviews         Review[]   @relation("MaidReviews")
  certifications  Certification[]
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String
  category    ServiceCategory
  basePrice   Float
  duration    Int           // Duration in minutes
  icon        String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  maidServices MaidService[]
  bookings     Booking[]
}

model MaidService {
  id          String @id @default(cuid())
  maidId      String
  serviceId   String
  customPrice Float? // Override base price
  isOffered   Boolean @default(true)

  maid    MaidProfile @relation(fields: [maidId], references: [id], onDelete: Cascade)
  service Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([maidId, serviceId])
}

model Booking {
  id             String        @id @default(cuid())
  customerId     String
  maidId         String
  serviceId      String
  scheduledDate  DateTime
  duration       Int           // Duration in minutes
  totalPrice     Float
  status         BookingStatus @default(PENDING)
  address        String
  latitude       Float
  longitude      Float
  specialInstructions String?
  completedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  customer  User        @relation("CustomerBookings", fields: [customerId], references: [id])
  maid      MaidProfile @relation("MaidBookings", fields: [maidId], references: [id])
  service   Service     @relation(fields: [serviceId], references: [id])
  review    Review?
  payment   Payment?
  messages  Message[]
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  customerId String
  maidId    String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  booking  Booking     @relation(fields: [bookingId], references: [id])
  customer User        @relation(fields: [customerId], references: [id])
  maid     MaidProfile @relation("MaidReviews", fields: [maidId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  userId        String
  amount        Float
  currency      String        @default("INR")
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  refundAmount  Float?        @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  bookingId String
  senderId  String
  content   String
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)

  booking Booking @relation(fields: [bookingId], references: [id])
  sender  User    @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Certification {
  id          String   @id @default(cuid())
  maidId      String
  name        String
  issuer      String
  issueDate   DateTime
  expiryDate  DateTime?
  documentUrl String?
  isVerified  Boolean  @default(false)

  maid MaidProfile @relation(fields: [maidId], references: [id])
}

enum UserRole {
  CUSTOMER
  MAID
  ADMIN
}

enum ServiceCategory {
  HOUSEKEEPING
  DEEP_CLEANING
  COOKING
  LAUNDRY
  BABYSITTING
  ELDERLY_CARE
  PET_CARE
  GARDENING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  SYSTEM_UPDATE
}
